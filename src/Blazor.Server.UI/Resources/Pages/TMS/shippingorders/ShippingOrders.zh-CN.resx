<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actions" xml:space="preserve">
    <value>操作</value>
  </data>
  <data name="Cancle" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Cash Advance" xml:space="preserve">
    <value>预支款</value>
  </data>
  <data name="Cost" xml:space="preserve">
    <value>成本</value>
  </data>
  <data name="Costs" xml:space="preserve">
    <value>费用支出明细</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>新建</value>
  </data>
  <data name="Create a new shipping order" xml:space="preserve">
    <value>创建运单</value>
  </data>
  <data name="Create successfully" xml:space="preserve">
    <value>创建成功</value>
  </data>
  <data name="Customer" xml:space="preserve">
    <value>客户</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="Deleted successfully" xml:space="preserve">
    <value>删除成功</value>
  </data>
  <data name="Delivery Address" xml:space="preserve">
    <value>卸货地址</value>
  </data>
  <data name="Dispatcher" xml:space="preserve">
    <value>调度员</value>
  </data>
  <data name="Downloading..." xml:space="preserve">
    <value>下载中...</value>
  </data>
  <data name="Driver" xml:space="preserve">
    <value>司机</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="Edit the shipping order" xml:space="preserve">
    <value>编辑运单</value>
  </data>
  <data name="Export Data" xml:space="preserve">
    <value>导出Excel</value>
  </data>
  <data name="Finish" xml:space="preserve">
    <value>完成</value>
  </data>
  <data name="Finish Time" xml:space="preserve">
    <value>返回日期</value>
  </data>
  <data name="Freight" xml:space="preserve">
    <value>运费</value>
  </data>
  <data name="Goods" xml:space="preserve">
    <value>货物明细</value>
  </data>
  <data name="Goods Name" xml:space="preserve">
    <value>物品名称</value>
  </data>
  <data name="Gross Margin" xml:space="preserve">
    <value>毛利</value>
  </data>
  <data name="Import Data" xml:space="preserve">
    <value>导入Excel</value>
  </data>
  <data name="Import data successfully" xml:space="preserve">
    <value>导入成功</value>
  </data>
  <data name="Loading.." xml:space="preserve">
    <value>加载中...</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>费用名称</value>
  </data>
  <data name="No Allowed" xml:space="preserve">
    <value>没有权限</value>
  </data>
  <data name="No matching records found" xml:space="preserve">
    <value>没有找到记录</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>确定</value>
  </data>
  <data name="Order No" xml:space="preserve">
    <value>运单号</value>
  </data>
  <data name="Order number is required!" xml:space="preserve">
    <value>运单号必填!</value>
  </data>
  <data name="Phone Number" xml:space="preserve">
    <value>司机电话</value>
  </data>
  <data name="Pickup Address" xml:space="preserve">
    <value>提货地址</value>
  </data>
  <data name="Pickup/Delivery Address" xml:space="preserve">
    <value>提货/卸货地址</value>
  </data>
  <data name="Plate Number" xml:space="preserve">
    <value>车牌号</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>刷新</value>
  </data>
  <data name="Remark" xml:space="preserve">
    <value>备注</value>
  </data>
  <data name="Save successfully" xml:space="preserve">
    <value>保存成功</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>查询</value>
  </data>
  <data name="Shipping Orders" xml:space="preserve">
    <value>运单信息</value>
  </data>
  <data name="Starting Time" xml:space="preserve">
    <value>出发日期</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="typing cost" xml:space="preserve">
    <value>输入费用</value>
  </data>
  <data name="typing delivery address" xml:space="preserve">
    <value>输入卸货地址</value>
  </data>
  <data name="typing pickup address" xml:space="preserve">
    <value>输入提货地址</value>
  </data>
  <data name="Uploading..." xml:space="preserve">
    <value>上传中...</value>
  </data>
  <data name="You're sure you want to delete the order:{0}?" xml:space="preserve">
    <value>你确定要删除运单:{0}?</value>
  </data>
  <data name="You're sure you want to delete the selected items:{0}?" xml:space="preserve">
    <value>你确定要删除选中的运单{0}?</value>
  </data>
  <data name="Delivery Time" xml:space="preserve">
    <value>送达时间</value>
  </data>
  <data name="Pickup Time" xml:space="preserve">
    <value>提货时间</value>
  </data>
  <data name="Pickup/Delivery Time" xml:space="preserve">
    <value>提货/送达时间</value>
  </data>
</root>