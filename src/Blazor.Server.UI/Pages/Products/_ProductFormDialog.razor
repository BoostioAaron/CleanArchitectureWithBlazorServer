@using CleanArchitecture.Blazor.Application.Features.Products.Commands.AddEdit
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing
@inherits MudComponentBase
@inject IStringLocalizer<Products> L
<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="@L["Product Name"]" @bind-Value="model.Name"
                                  For="@(() => model.Name)"
                                  Required="true"
                                  RequiredError="@L["product name is required!"]">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="@L["Description"]"
                                  Lines="3"
                                  For="@(() => model.Description)"
                    @bind-Value="model.Description"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <PicklistAutocomplete Picklist="Picklist.Brand"
                                          Label="@L["Brand Name"]"
                                          For="@(() => model.Brand)"
                                          ResetValueOnEmptyText="true"
                                          ShowProgressIndicator="true"
                    @bind-Value="model.Brand">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </PicklistAutocomplete>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudNumericField Label="@L["Price"]"
                                     T="decimal"
                                     Format="N2"
                                     For="@(() => model.Price)"
                                     Min="0.00m"
                    @bind-Value="model.Price"></MudNumericField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <PicklistAutocomplete Picklist="Picklist.Unit"
                                          Label="@L["Unit"]"
                                          For="@(() => model.Unit)"
                                          ResetValueOnEmptyText="true"
                                          ShowProgressIndicator="true"
                    @bind-Value="model.Unit">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </PicklistAutocomplete>
                </MudItem>
                <MudItem>
                    <div class="d-flex flex-row gap-4 mb-2">
                        <MudFileUpload T="IReadOnlyList<IBrowserFile>" Multiple
                                       SuppressOnChangeWhenInvalid="true"
                                       @bind-Files="model.UploadPictures" OnFilesChanged="UploadFiles" For="@(() => model.UploadPictures)">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label" Disabled="_uploading"
                                           Variant="Variant.Filled"
                                           Color="MudBlazor.Color.Primary"
                                           for="@context">
                                    @(L[!_uploading ? "Upload picture" : "Processing"])
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </div>
                    <MudText Typo="Typo.body2">@L["The recommended size for uploading images is 640X320"]</MudText>
                    <div class="d-fex">
                        @if (model.Pictures is not null)
                        {
                            foreach (var img in model.Pictures)
                            {
                                <div style="float:left; position: relative; width: 160px; height: 80px; margin: 10px;">
                                    <MudImage ObjectFit="ObjectFit.Cover" Height="80" Width="160" Src="@img" Alt="@img" Elevation="25" Class="mr-2 rounded-lg" />
                                    <div style="position: absolute;top: 0px;right: 0px; z-index: 9999;">
                                        <MudIconButton OnClick="@(()=>DeleteImage(@img))"   Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small"></MudIconButton>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.CANCEL</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">@ConstantString.OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form = default!;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private IUploadService _uploadService { get; set; } = default!;
    AddEditProductCommandValidator _modelValidator = new();
    [EditorRequired][Parameter] public AddEditProductCommand model { get; set; } = default!;
    const long MAXALLOWEDSIZE = 3145728;
    bool _uploading;

    private async Task DeleteImage(string picture)
    {
        if (model.Pictures != null)
        {
            var parameters = new DialogParameters
                        {
                    { nameof(ConfirmationDialog.ContentText), $"{L["Are you sure you want to erase this image?"]}" }
                        };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
            var dialog = DialogService.Show<ConfirmationDialog>($"{L["Erase imatge"]}", parameters, options);
            var state = await dialog.Result;

            if (!state.Canceled)
            {
                model.Pictures.Remove(picture);
            }
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            _uploading = true;
            var list = new List<string>();

            foreach (var file in e.GetMultipleFiles())
            {
                try
                {
                    var filestream = file.OpenReadStream(MAXALLOWEDSIZE);
                    var imgstream = new MemoryStream();
                    await filestream.CopyToAsync(imgstream);
                    imgstream.Position = 0;
                    using (var outStream = new MemoryStream())
                    {
                        using (var image = Image.Load(imgstream, out IImageFormat format))
                        {
                            image.Mutate(
                               i => i.Resize(new ResizeOptions() { Mode = SixLabors.ImageSharp.Processing.ResizeMode.Crop, Size = new SixLabors.ImageSharp.Size(640, 320) }));
                            image.Save(outStream, format);
                            var filename = file.Name;
                            var fi = new FileInfo(filename);
                            var ext = fi.Extension;
                            var result = await _uploadService.UploadAsync(new UploadRequest(Guid.NewGuid().ToString() + ext, UploadType.Product, outStream.ToArray()));
                            list.Add(result);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"{ex.Message}", MudBlazor.Severity.Error);
                }
            }
            Snackbar.Add(L["Upload pictures successfully"], MudBlazor.Severity.Info);

            if (model.Pictures is null)
                model.Pictures = list;
            else
                ((List<String>)model.Pictures).AddRange(list);

        }
        finally
        {
            _uploading = false;
        }
    }
    async Task Submit()
    {
            await _form!.Validate();
            if (_form!.IsValid)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }


    }
    void Cancel() => MudDialog.Cancel();
}
