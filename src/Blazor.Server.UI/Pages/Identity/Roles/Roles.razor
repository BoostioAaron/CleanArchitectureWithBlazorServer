@inherits OwningComponentBase
@page "/identity/roles"
@using Blazor.Server.UI.Components.Dialogs
@using CleanArchitecture.Blazor.Application.Common.Exceptions;
@using CleanArchitecture.Blazor.Application.Features.Identity.Dto;
@using CleanArchitecture.Blazor.Infrastructure.Constants.ClaimTypes
@using CleanArchitecture.Blazor.Application.Common.Security;
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel
@using System.Reflection
@using System.Security.Claims

@attribute [Authorize(Policy = Permissions.Roles.View)]
@inject IStringLocalizer<Roles> L
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudTable Items="@_roleList"
                  FixedHeader="true"
                  FixedFooter="true"
                  Height="calc(100vh - 265px)"
                  Hover="true"
                  MultiSelection="true"
                  @bind-RowsPerPage="_defaultPageSize"
                  @bind-SelectedItems="_selectItems"
                  SortLabel="@ConstantString.ORDERBY"
                  Loading="@_loading"
                  Filter="new Func<RoleDto,bool>(_quickFilter)">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Roles"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="OnRefresh"
                                   Disabled="@_loading"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@ConstantString.REFRESH</MudButton>
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@ConstantString.CREATE</MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(_selectItems.Count>0))"
                                   OnClick="OnDeleteChecked"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@ConstantString.DELETE</MudButton>
                        }
                        @if (_canImport)
                        {
                            <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Upload"
                                   Size="Size.Small"
                                   for="importdataInput"
                                   HtmlTag="label"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@ConstantString.IMPORT</MudButton>
                        }
                        @if (_canExport)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@ConstantString.EXPORT</MudButton>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Filled.KeyboardCommandKey" EndIcon="@Icons.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@_loading" OnClick="@(()=>OnRefresh())">@ConstantString.REFRESH</MudMenuItem>
                            @if (_canCreate)
                            {
                                <MudMenuItem OnClick="OnCreate">@ConstantString.CREATE</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@ConstantString.DELETE</MudMenuItem>
                            }
                            @if (_canImport)
                            {
                                <InputFile id="importdataInput" OnChange="OnImportData" hidden accept=".xlsx" />
                                <MudMenuItem for="importdataInput"
                                         HtmlTag="label">@ConstantString.IMPORT</MudMenuItem>
                            }
                            @if (_canExport)
                            {
                                <MudMenuItem OnClick="OnExport">@ConstantString.EXPORT</MudMenuItem>
                            }
                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                @if (_canSearch)
                {
                    <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth="false"
                              Placeholder="@(L["Search for role name"])" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3">
                    </MudTextField>
                }
            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <col style="width:50px;" />
                    <col style="width:120px;" />
                    <col  />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh>@ConstantString.ACTIONS</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<RoleDto, object>(x=>x.Name!)">@L["Name"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ConstantString.ACTIONS">
                    @if (_canEdit || _canManagePermissions)
                    {
                        <MudMenu Label="@ConstantString.ACTIONS" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@ConstantString.EDIT</MudMenuItem>
                            }
                            @if (_canManagePermissions)
                            {
                                <MudMenuItem OnClick="@(()=>OnSetPermissions(context))">@L["Set Permissions"]</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @ConstantString.NOALLOWED
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="@L["Name"]">
                    <div class="d-flex flex-column">
                        <MudText>@context.Name</MudText>
                        <MudText Typo="Typo.body2">@context.Description</MudText>
                    </div>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                 <MudTablePager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudTable>

        <_PermissionsDrawer OnAssignAllChanged="OnAssignAllChangedHandler" OnOpenChanged="OnOpenChangedHandler" Open="_showPermissionsDrawer" Permissions="_permissions" OnAssignChanged="OnAssignChangedHandler"></_PermissionsDrawer>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code {

    private string _currentRoleName = string.Empty;
    private List<RoleDto> _roleList = new();
    private int _defaultPageSize = 15;
    private HashSet<RoleDto> _selectItems = new();
    private string _searchString = string.Empty;
    public string? Title { get; private set; }
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;

    private RoleManager<ApplicationRole> _roleManager { get; set; } = default!;

    private List<PermissionModel> _permissions = new();
    private IList<Claim> _assignedClaims = default!;
    private bool _canCreate;
    private bool _canSearch;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canManagePermissions;
    private bool _canImport;
    private bool _canExport;
    private bool _showPermissionsDrawer;
    private bool _loading;
    protected override async Task OnInitializedAsync()
    {
        _roleManager = ScopedServices.GetRequiredService<RoleManager<ApplicationRole>>();
        Title = L["Roles"];
        var state = await _authState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.Delete)).Succeeded;
        _canManagePermissions = (await AuthService.AuthorizeAsync(state.User, Permissions.Roles.ManagePermissions)).Succeeded;
        _canImport = false;// (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Import)).Succeeded;
        _canExport = false;// (await AuthService.AuthorizeAsync(state.User, Permissions.Users.Export)).Succeeded;
        await LoadData();

    }
    private Func<RoleDto, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (x.Name is not null && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           if (x.Description is not null && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           return false;
       };
    private async Task OnRefresh()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        if (_loading) return;
        try
        {
            _loading = true;
            _roleList = await _roleManager.Roles.Select(x=>new RoleDto {Id=x.Id,Name=x.Name!,Description=x.Description }).ToListAsync();
        }
        finally
        {
            _loading = false;
        }
    }
    private async Task OnCreate()
    {
        var model = new RoleDto();
        var parameters = new DialogParameters { ["model"] = model };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<_RoleFormDialog>(L["Create a new role"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var applicationRole = new ApplicationRole()
                {
                    Name = model.Name,
                    Description = model.Description
                };

            var state = await _roleManager.CreateAsync(applicationRole);
            if (state.Succeeded)
            {
                model.Id = applicationRole.Id;
                _roleList.Add(model);
                Snackbar.Add($"{ConstantString.CREATESUCCESS}", MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }
    private async Task OnEdit(RoleDto item)
    {
        var parameters = new DialogParameters { ["model"] = item };
        var options = new DialogOptions {CloseButton=true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<_RoleFormDialog>(L["Edit the role"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var role=new ApplicationRole(){ Id = item.Id,Name=item.Name,Description=item.Description};
            var state = await _roleManager.UpdateAsync(role);
            if (state.Succeeded)
            {
                Snackbar.Add($"{ConstantString.UPDATESUCCESS}", MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", (state.Errors.Select(x => x.Description).ToArray()))}", MudBlazor.Severity.Error);
            }
        }
    }
    private async Task OnSetPermissions(RoleDto item)
    {
        _currentRoleName = item.Name!;
        _permissions = await GetAllPermissions(item);
        _showPermissionsDrawer = true;

    }

    private async Task<List<PermissionModel>> GetAllPermissions(RoleDto dto)
    {
        var role = await _roleManager.FindByIdAsync(dto.Id);
        _assignedClaims = await _roleManager.GetClaimsAsync(role);
        var allPermissions = new List<PermissionModel>();
        var modules = typeof(Permissions).GetNestedTypes();
        foreach (var module in modules)
        {
            var moduleName = string.Empty;
            var moduleDescription = string.Empty;
            if (module.GetCustomAttributes(typeof(DisplayNameAttribute), true)
                .FirstOrDefault() is DisplayNameAttribute displayNameAttribute)
                moduleName = displayNameAttribute.DisplayName;

            if (module.GetCustomAttributes(typeof(DescriptionAttribute), true)
                .FirstOrDefault() is DescriptionAttribute descriptionAttribute)
                moduleDescription = descriptionAttribute.Description;

            var fields = module.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);
            foreach (var fi in fields)
            {
                var propertyValue = fi.GetValue(null);

                if (propertyValue is not null)
                {
                    var claimValue = propertyValue.ToString();
                    allPermissions.Add(
                        new PermissionModel
                            {
                                RoleId = role.Id,
                                ClaimValue = claimValue,
                                ClaimType = ApplicationClaimTypes.Permission,
                                Group = moduleName,
                                Description = moduleDescription,
                                Assigned = _assignedClaims.Any(x => x.Value == claimValue)
                            });
                }
            }
        }
        return allPermissions;
    }
    private Task OnOpenChangedHandler(bool state)
    {
        _showPermissionsDrawer = state;
        return Task.CompletedTask;
    }
    private async Task OnAssignChangedHandler(PermissionModel model)
    {
        var roleId = model.RoleId!;
        var role = await _roleManager.FindByIdAsync(roleId) ?? throw new NotFoundException($"Application role {roleId} Not Found."); ;
        model.Assigned = !model.Assigned;
        if (model.Assigned && model.ClaimType is not null && model.ClaimValue is not null)
        {
            await _roleManager.AddClaimAsync(role, new Claim(model.ClaimType, model.ClaimValue));
            Snackbar.Add($"{L["Assigned successfully"]}", MudBlazor.Severity.Info);
        }
        else
        {
            var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
            if (removed is not null)
            {
                await _roleManager.RemoveClaimAsync(role, removed);
            }
            Snackbar.Add($"{L["Unassigned successfully"]}", MudBlazor.Severity.Info);
        }


    }
    private async Task OnAssignAllChangedHandler(List<PermissionModel> models)
    {
        var roleId = models.First().RoleId;
        var role = await _roleManager.FindByIdAsync(roleId!);
        foreach (var model in models)
        {

            if (model.Assigned)
            {
                if (model.ClaimType is not null && model.ClaimValue is not null)
                {
                    await _roleManager.AddClaimAsync(role!, new Claim(model.ClaimType, model.ClaimValue));
                }
            }
            else
            {
                var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                if (removed is not null)
                {
                    await _roleManager.RemoveClaimAsync(role!, removed);
                }

            }
        }
        Snackbar.Add($"{L["Assign changed successfully"]}", MudBlazor.Severity.Info);
    }
    private async Task OnDeleteChecked()
    {
        string deleteContent = ConstantString.DELETECONFIRMATION;
        var parameters = new DialogParameters
        {
            { nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, _selectItems.Count) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DELETECONFIRMATIONTITLE, parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            foreach (var item in _selectItems)
            {
                var deleterole = await _roleManager.FindByIdAsync(item.Id);
                await _roleManager.DeleteAsync(deleterole!);
                _roleList.Remove(item);
            }
            Snackbar.Add($"{L["Deleted successfully"]}", MudBlazor.Severity.Info);
        }
    }
    private Task OnExport()
    {

        return Task.CompletedTask;
    }
    private Task OnImportData(InputFileChangeEventArgs e)
    {
        return Task.CompletedTask;
    }



}
