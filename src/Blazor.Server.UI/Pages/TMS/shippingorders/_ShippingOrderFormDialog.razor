@using CleanArchitecture.Blazor.Application.Features.KeyValues.Queries.ByName
@using CleanArchitecture.Blazor.Application.Features.ShippingOrders.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Trucks.DTOs
@using CleanArchitecture.Blazor.Domain.Entities
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing
@inherits MudComponentBase
@inject IStringLocalizer<ShippingOrders> L
<MudDialog>
    <DialogContent>
        <MudForm Model="model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="@L["OrderNo"]" @bind-Value="model.OrderNo"
                                  ReadOnly="@(model.Id>0?true:false)"
                                  For="@(() => model.OrderNo)"
                                  Required="true"
                                  RequiredError="@L["Order number is required!"]">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <DictionaryAutocomplete Dictionary="ShippingOrderStatus"
                                            Label="@L["Status"]"
                                            ReadOnly="true"
                                            For="@(() => model.Status)"
                                            @bind-Value="model.Status"></DictionaryAutocomplete>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudSelect T="string" Label="@L["Truck"]"
                               For="@(() => model.PlateNumber)"
                               Value="model.PlateNumber"
                               Required="true"
                               RequiredError="@L["Plate number is required!"]"
                               ValueChanged="Truck_Changed">
                        @foreach (var truck in trucks)
                        {
                            <MudSelectItem Value="@truck.PlateNumber">@truck.PlateNumber</MudSelectItem>
                        }

                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField Label="@L["Driver"]" @bind-Value="model.Driver"
                                  For="@(() => model.Driver)">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField Label="@L["Phone Number"]" @bind-Value="model.PhoneNumber"
                                  For="@(() => model.PhoneNumber)">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField Label="@L["Dispatcher"]"
                                  For="@(() => model.Dispatcher)"
                                  @bind-Value="model.Dispatcher"
                                  Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudDatePicker Label="@L["Starting Time"]"
                                   Editable="true"
                                   For="@(() => model.StartingTime)"
                                   @bind-Date="model.StartingTime"></MudDatePicker>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudDatePicker Label="@L["Finish Time"]"
                                   Editable="true"
                                   For="@(() => model.FinishTime)"
                                   @bind-Date="model.FinishTime"></MudDatePicker>
                </MudItem>

                <MudItem xs="12" sm="3">
                    <MudNumericField Label="@L["Cash Advance"]"
                                     HideSpinButtons="true"
                                     For="@(() => model.CashAdvance)"
                                     @bind-Value="model.CashAdvance"
                                     ReadOnly="false"
                                     Variant="Variant.Text"
                                     Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyYen"
                                     Min="0" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudNumericField Label="@L["Freight"]"
                                     HideSpinButtons="true"
                                     For="@(() => model.Freight)"
                                     @bind-Value="model.Freight"
                                     ReadOnly="true"
                                     Variant="Variant.Filled"
                                     Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyYen"
                                     Min="0" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudNumericField Label="@L["Cost"]"
                                     HideSpinButtons="true"
                                     For="@(() => model.Cost)"
                                     @bind-Value="model.Cost"
                                     ReadOnly="true"
                                     Variant="Variant.Filled"
                                     Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyYen"
                                     Min="0" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudNumericField Label="@L["Gross Margin"]"
                                     HideSpinButtons="true"
                                     For="@(() => model.GrossMargin)"
                                     @bind-Value="model.GrossMargin"
                                     ReadOnly="true"
                                     Variant="Variant.Filled"
                                     Min="0" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="@L["Remark"]"
                                  Lines="2"
                                  For="@(() => model.Remark)"
                                  @bind-Value="model.Remark"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0">
                        <MudTabPanel Text="@L["Goods"]" Icon="@Icons.Filled.AutoAwesomeMotion"
                                     BadgeData="@model.GoodsDetailDtos.Count">
                            <MudToolBar Dense="false">
                                <MudIconButton OnClick="AddGoods" Icon="@Icons.Material.Outlined.Add" />
                                <MudIconButton Disabled="@(selectedGoodsItem==null)" OnClick="EditGoods" Icon="@Icons.Material.Outlined.Edit" />

                            </MudToolBar>
                            <MudTable @ref="goodsTable" Items="@model.GoodsDetailDtos"
                                      Hover="false"
                                      @bind-SelectedItem="selectedGoodsItem"
                                      RowEditCommit="GoodsItemCommitted"
                                      OnCommitEditClick="GoodsCommitClick"
                                      IsEditRowSwitchingBlocked="true"
                                      FixedHeader="true"
                                      Height="300px"
                                      Breakpoint="Breakpoint.Sm">
                                <HeaderContent>
                                    <MudTh>@L["Pickup/Delivery Address"]</MudTh>
                                    <MudTh>@L["Goods Name"]</MudTh>
                                    <MudTh>@L["Freight"]</MudTh>
                                    <MudTh>@L["Customer"]</MudTh>
                                    <MudTh>@L["Remark"]</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <ColGroup>
                                    <col style="width:40%;" />
                                    <col style="width:160px" />
                                    <col style="width:150px" />
                                    <col style="width:180px" />
                                    <col />
                                    <col style="width:30px" />
                                </ColGroup>
                                <RowTemplate>
                                    <MudTd DataLabel="PickupAddress">
                                        <MudText Typo="Typo.body2">@L["Pickup Address"]: @context.PickupAddress</MudText>
                                        <MudText Typo="Typo.body2">@L["Delivery Address"]: @context.DeliveryAddress</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Goods">@context.Goods</MudTd>
                                    <MudTd DataLabel="Freight">@context.Freight</MudTd>
                                    <MudTd DataLabel="Customer">@context.Customer</MudTd>
                                    <MudTd DataLabel="Remark">@context.Remark</MudTd>
                                    <MudTd DataLabel="_delete"><MudIconButton Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Secondary" OnClick="@(()=>DeleteGoods(context))" Icon="@Icons.Material.Outlined.Delete" /></MudTd>
                                </RowTemplate>
                                <RowEditingTemplate>
                                    <MudTd DataLabel="PickupAddress">
                                        <MudTextField Label="@L["Pickup Address"]" @bind-Value="@context.PickupAddress" Required />
                                        <MudTextField Label="@L["Delivery Address"]" @bind-Value="@context.DeliveryAddress" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Goods">
                                        <MudTextField @bind-Value="@context.Goods" />
                                    </MudTd>
                                    <MudTd DataLabel="Freight">
                                        <MudNumericField @bind-Value="@context.Freight" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Customer">
                                        <MudTextField @bind-Value="@context.Customer" />
                                    </MudTd>
                                    <MudTd DataLabel="Remark">
                                        <MudTextField @bind-Value="@context.Remark" />
                                    </MudTd>
                                     <MudTd DataLabel="_delete">
                                       
                                    </MudTd>
                                </RowEditingTemplate>
                            </MudTable>
                        </MudTabPanel>
                        <MudTabPanel Text="@L["Costs"]" Icon="@Icons.Filled.CurrencyYen"
                                     BadgeData="@model.CostDetailDtos.Count">
                            <MudToolBar Dense="false">
                                <MudIconButton OnClick="AddCost" Icon="@Icons.Material.Outlined.Add" />
                                <MudIconButton  Disabled="@(selectedCostItem==null)" OnClick="EditCost" Icon="@Icons.Material.Outlined.Edit" />

                            </MudToolBar>
                            <MudTable @ref="costTable" Items="@model.CostDetailDtos" Hover="false"
                                      @bind-SelectedItem="selectedCostItem"
                                      RowEditCommit="CostItemCommitted"
                                      OnCommitEditClick="CostCommitClick"
                                      IsEditRowSwitchingBlocked="true"
                                      FixedHeader="true"
                                      Height="300px"
                                      Breakpoint="Breakpoint.Sm">
                                <HeaderContent>
                                    <MudTh>@L["Name"]</MudTh>
                                    <MudTh>@L["Cost"]</MudTh>
                                    <MudTh>@L["Remark"]</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <ColGroup>
                                    <col style="width:50%;" />
                                    <col style="width:150px" />
                                    <col style="width:30%"/>
                                    <col style="width:30px"/>
                                </ColGroup>
                                <RowTemplate>
                                    <MudTd DataLabel="Name">@context.Name</MudTd>
                                    <MudTd DataLabel="Cost">@context.Cost</MudTd>
                                    <MudTd DataLabel="Remark">@context.Remark</MudTd>
                                    <MudTd DataLabel="_delete"><MudIconButton Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Secondary" OnClick="@(()=>DeleteCost(context))" Icon="@Icons.Material.Outlined.Delete" /></MudTd>
                                </RowTemplate>
                                <RowEditingTemplate>
                                    <MudTd DataLabel="Name">
                                        <DictionaryAutocomplete Dictionary="CostName" @bind-Value="@context.Name" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Cost">
                                        <MudNumericField @bind-Value="@context.Cost" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Remark">
                                        <MudTextField @bind-Value="@context.Remark" />
                                    </MudTd>
                                    <MudTd DataLabel="_delete">
                                       
                                    </MudTd>
                                </RowEditingTemplate>
                            </MudTable>
                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@L["Cancle"]</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">@L["Ok"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm form = default!;
    MudTable<GoodsDetailDto> goodsTable;
    MudTable<CostDetailDto> costTable;
    GoodsDetailDto selectedGoodsItem;
    CostDetailDto selectedCostItem;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private IUploadService _uploadService { get; set; } = default!;
    AddEditShippingOrderCommandValidator modelValidator = new AddEditShippingOrderCommandValidator();
    [EditorRequired][Parameter] public AddEditShippingOrderCommand model { get; set; } = default!;
    [EditorRequired][Parameter] public IEnumerable<TruckDto> trucks { get; set; } = default!;
    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }

    }
    void Cancel() => MudDialog.Cancel();
    private void Truck_Changed(string value)
    {
        var truck = trucks.First(x => x.PlateNumber == value);
        model.TruckId = truck.Id;
        model.PlateNumber = truck.PlateNumber;
        model.Driver = truck.Driver;
        model.PhoneNumber = truck.PhoneNumber;
    }

    private async void AddGoods()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var newItem = new GoodsDetailDto()
                {
                    ShippingOrderId = model.Id,
                };
            model.GoodsDetailDtos.Add(newItem);
            StateHasChanged();
        }

    }
    private void EditGoods()
    {
        goodsTable.SetEditingItem(selectedGoodsItem);
    }
    private void DeleteGoods(GoodsDetailDto item)
    {
        model.GoodsDetailDtos.Remove(item);
    }
    private void AddCost()
    {
        var newItem = new CostDetailDto()
            {
                ShippingOrderId = model.Id,
            };
        model.CostDetailDtos.Add(newItem);
        //costTable.SetEditingItem(newItem);
    }
    private void EditCost()
    {
        costTable.SetEditingItem(selectedCostItem);
    }
    private void DeleteCost(CostDetailDto item)
    {
        model.CostDetailDtos.Remove(item);
    }
    private void GoodsItemCommitted(object element)
    {
        //model.Freight = model.GoodsDetailDtos.Sum(x => x.Freight);
    }
    private void GoodsCommitClick()
    {
        model.Freight = model.GoodsDetailDtos.Sum(x => x.Freight);
    }
    private void CostItemCommitted(object element)
    {
        //model.Cost = model.CostDetailDtos.Sum(x => x.Cost);
    }
    private void CostCommitClick()
    {
        model.Cost = model.CostDetailDtos.Sum(x => x.Cost);
    }
}
